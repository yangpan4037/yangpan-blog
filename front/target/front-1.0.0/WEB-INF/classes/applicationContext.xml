<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd">
	
	<!-- 1.组件扫描 -->
	<context:component-scan base-package="com.yangpan.front" />

	<context:property-placeholder location="classpath:jdbc.properties" />

	<!--数据库连接池 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close" p:driverClassName="${jdbc.driverClassName}"
		p:url="${jdbc.url}" p:username="${jdbc.username}" p:password="${jdbc.password}">
		<!--maxActive: 最大连接数量 -->
		<property name="maxActive" value="150" />
		<!--minIdle: 最小空闲连接 -->
		<property name="minIdle" value="5" />
		<!--maxIdle: 最大空闲连接 -->
		<property name="maxIdle" value="20" />
		<!--initialSize: 初始化连接 -->
		<property name="initialSize" value="30" />
		<!-- 连接被泄露时是否打印 -->
		<property name="logAbandoned" value="true" />
		<!--removeAbandoned: 是否自动回收超时连接 -->
		<property name="removeAbandoned" value="true" />
		<!--removeAbandonedTimeout: 超时时间(以秒数为单位) -->
		<property name="removeAbandonedTimeout" value="10" />
		<!--maxWait: 超时等待时间以毫秒为单位 1000等于60秒 -->
		<property name="maxWait" value="1000" />
		<!-- 在空闲连接回收器线程运行期间休眠的时间值,以毫秒为单位. -->
		<property name="timeBetweenEvictionRunsMillis" value="10000" />
		<!-- 在每次空闲连接回收器线程(如果有)运行时检查的连接数量 -->
		<property name="numTestsPerEvictionRun" value="10" />
		<!-- 1000 * 60 * 30 连接在池中保持空闲而不被空闲连接回收器线程 -->
		<property name="minEvictableIdleTimeMillis" value="10000" />
		<property name="validationQuery" value="SELECT NOW() FROM DUAL" />
	</bean>

	<!-- 2.获取SQLSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 注入连接池 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 注入映射文件的位置 -->
		<property name="mapperLocations" value="classpath*:cn/group6/crm/mapper/*Mapper.xml" />
		<!-- 所有domain模型的别名配置 -->
		<property name="typeAliasesPackage" value="com.yangpan.core.domain,com.yangpan.front.query" />
	</bean>

	<!-- 一劳永逸配置mybatis的映射器 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 当前包下面的所有Mapper映射器接口都会由spring自动通过jdk动态代理获取其实现类 -->
		<property name="basePackage" value="com.yangpan.front.mapper" />
	</bean>

	<!-- 事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager" p:dataSource-ref="dataSource" />

	<!-- aop切入点 -->
	<aop:config>
		<aop:advisor pointcut="execution(* com.yangpan.front.service.I*Service.*(..))" advice-ref="txAdvice" />
	</aop:config>
	<!-- 事务方法：属性 -->
	<tx:advice id="txAdvice">
		<tx:attributes>
			<!-- service层接口里面以get，find开头的方法都不需要事务管理，如果有事务都是只读 -->
			<tx:method name="get*" read-only="true" propagation="SUPPORTS" />
			<tx:method name="find*" read-only="true" propagation="SUPPORTS" />
			<!-- 其它方法全部由事务 -->
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>

	<!--系统日志 -->
<!-- 	<bean id="systemLogService" class="com.yangpan.front.service.impl.SystemLogServiceImpl"></bean> -->
<!-- 	<bean id="logUtils" class="com.yangpan.front.util.LogUtils"> -->
<!-- 		<property name="logService" ref="systemLogService"></property> -->
<!-- 	</bean> -->
<!-- 	<aop:config> -->
<!-- 		<aop:pointcut id="logPointcut" expression="execution(* com.yangpan.front.service.I*Service.*(..))"/> -->
<!-- 		<aop:aspect ref="logUtils"> -->
<!-- 			<aop:after method="writeLog" pointcut-ref="logPointcut"/> -->
<!-- 		</aop:aspect> -->
<!-- 	</aop:config> -->
	
	<!-- 导入配置文件 -->
	<import resource="classpath*:plugin/applicationContext-*.xml" />

</beans>